
# Start the conversation

{% if initial_chat_targets | length > 1 %}
# Sequential Chats
chat_results = node_{{ first_converser['id'] }}.initiate_chats(
    [
      {%- for target in initial_chat_targets %}
      {
        "recipient": node_{{ target['node']['id'] }},
        {%- if loop.first %}
        "message": args.message,
        {%- elif target['chat_options'].instructions %}
        "message": "{{ target.chat_options.instructions }}",
        {%- endif %}
        {%- if target['chat_options'].max_turns %}
        "max_turns": {{ target.chat_options.max_turns }},
        {%- endif %}
        {%- if target['chat_options'].summary_method %}
        "summary_method": "{{ target.chat_options.summary_method }}",
        {%- endif %}
        {%- if target['chat_options'].summary_prompt %}
        "summary_prompt": "{{ target.chat_options.summary_prompt }}",
        {%- endif %}
      }{% if not loop.last %},{% endif %}
      {%- endfor %}
    ]
)

# Output the sequential chat results
import json
print("__CHAT_RESULTS__", json.dumps([{
    "chat_id": result.chat_id,
    "chat_history": result.chat_history,
    "summary": result.summary,
    "cost": result.cost,
    "human_input": result.human_input
} for result in chat_results]))


{%- elif initial_chat_targets | length == 1 %}
{%- if initial_chat_targets[0].node['type'] == 'nestedchat' %}
# Nested Chat
reply =  node_{{ first_converser['id'] }}.generate_reply(
    messages=[{"role": "user", "content": args.message}]
)
{%- else -%}
# Talk to one single agent
chat_result = node_{{ first_converser['id'] }}.initiate_chat(
    node_{{ initial_chat_targets[0].node['id'] }},
    {%- if initial_chat_targets and initial_chat_targets[0] and 'data' in initial_chat_targets[0] and initial_chat_targets[0]['data'].class_type in ['RetrieveUserProxyAgent', 'MathUserProxyAgent']  %}
    problem=args.message,
    {%- else %}
    message=args.message,
    {%- endif %}
    {%- if initial_chat_targets[0]['chat_options'].max_turns %}
    max_turns={{ initial_chat_targets[0]['chat_options'].max_turns }},
    {%- endif %}
    {%- if initializer_node and initializer_node['data'] and initializer_node.data['summary_method'] %}
    summary_method="{{ initializer_node.data.summary_method }}",
    {%- endif %}
    {%- if initializer_node and initializer_node['data'] and initializer_node.data['summary_prompt'] %}
    summary_prompt="{{ initializer_node.data.summary_prompt }}",
    {%- endif %}
    {%- if initializer_node and initializer_node['data'] and initializer_node.data['max_turns'] %}
    max_turns={{ initializer_node.data.max_turns }},
    {%- endif %}
)

import json
print("__CHAT_RESULT__", json.dumps({
    "chat_id": chat_result.chat_id,
    "chat_history": chat_result.chat_history,
    "summary": chat_result.summary,
    "cost": chat_result.cost,
    "human_input": chat_result.human_input
}))

{%- endif -%}
{%- endif -%}
