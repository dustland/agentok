
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "pg_database_owner";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE OR REPLACE FUNCTION "public"."get_user_by_id"("user_id" "uuid") RETURNS SETOF "auth"."users"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  return query select * from auth.users where id = user_id;
end;
$$;

ALTER FUNCTION "public"."get_user_by_id"("user_id" "uuid") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."search_chunks_by_dataset"("p_dataset_id" integer, "p_query_vector" "public"."vector", "p_limit" integer) RETURNS TABLE("id" bigint, "document_id" bigint, "content" "text", "embedding" "public"."vector", "similarity" double precision)
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        c.id,
        c.document_id,
        c.content,
        c.embedding,
        1 - (c.embedding <=> p_query_vector) AS similarity
    FROM 
        chunks_with_dataset c
    WHERE 
        c.dataset_id = p_dataset_id
    ORDER BY 
        c.embedding <=> p_query_vector
    LIMIT p_limit;
END;
$$;

ALTER FUNCTION "public"."search_chunks_by_dataset"("p_dataset_id" integer, "p_query_vector" "public"."vector", "p_limit" integer) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."api_keys" (
    "id" bigint NOT NULL,
    "name" "text",
    "key" "text",
    "user_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."api_keys" OWNER TO "postgres";

COMMENT ON TABLE "public"."api_keys" IS 'Keys to access APIs with bearer token.';

ALTER TABLE "public"."api_keys" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."api_keys_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."chat_messages" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "sender" "text",
    "receiver" "text",
    "content" "text",
    "type" "text",
    "user_id" "uuid",
    "chat_id" bigint,
    "meta" "jsonb"
);

ALTER TABLE "public"."chat_messages" OWNER TO "postgres";

COMMENT ON TABLE "public"."chat_messages" IS 'Messages of each chat sessions.';

ALTER TABLE "public"."chat_messages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."chat_messages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."chats" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "from_project" bigint,
    "from_template" bigint,
    "config" "jsonb",
    "user_id" "uuid" NOT NULL,
    "from_type" "text" NOT NULL,
    "name" "text",
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "status" "text"
);

ALTER TABLE "public"."chats" OWNER TO "postgres";

COMMENT ON TABLE "public"."chats" IS 'Chat sessions';

COMMENT ON COLUMN "public"."chats"."from_project" IS 'Bind to a unpublished flow';

COMMENT ON COLUMN "public"."chats"."from_template" IS 'Bind to a published template';

COMMENT ON COLUMN "public"."chats"."config" IS 'Config details, comply to the Config node of the flow';

COMMENT ON COLUMN "public"."chats"."user_id" IS 'Owner';

COMMENT ON COLUMN "public"."chats"."from_type" IS 'Flow or template';

ALTER TABLE "public"."chats" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."chats_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."chunks" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "content" "text" NOT NULL,
    "embedding" "public"."vector" NOT NULL,
    "document_id" bigint,
    "chunk_index" bigint,
    "user_id" "uuid",
    "enabled" boolean DEFAULT true
);

ALTER TABLE "public"."chunks" OWNER TO "postgres";

COMMENT ON TABLE "public"."chunks" IS 'Vectorized Documents';

CREATE TABLE IF NOT EXISTS "public"."documents" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "dataset_id" bigint,
    "user_id" "uuid",
    "status" "text",
    "name" "text",
    "path" "text",
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "enabled" boolean DEFAULT true
);

ALTER TABLE "public"."documents" OWNER TO "postgres";

COMMENT ON TABLE "public"."documents" IS 'Documents for RAG, each document belongs to one Dataset.';

CREATE OR REPLACE VIEW "public"."chunks_with_dataset" AS
 SELECT "c"."id",
    "c"."created_at",
    "c"."content",
    "c"."embedding",
    "c"."document_id",
    "c"."chunk_index",
    "d"."dataset_id"
   FROM ("public"."chunks" "c"
     JOIN "public"."documents" "d" ON (("c"."document_id" = "d"."id")));

ALTER TABLE "public"."chunks_with_dataset" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."datasets" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "description" "text",
    "user_id" "uuid"
);

ALTER TABLE "public"."datasets" OWNER TO "postgres";

COMMENT ON TABLE "public"."datasets" IS 'Datasets for RAG.';

ALTER TABLE "public"."datasets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."datasets_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."chunks" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."documents_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."documents" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."documents_id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."projects" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "flow" "jsonb",
    "name" "text" NOT NULL,
    "description" "text",
    "settings" "jsonb",
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid"
);

ALTER TABLE "public"."projects" OWNER TO "postgres";

COMMENT ON TABLE "public"."projects" IS 'Flow data';

ALTER TABLE "public"."projects" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."flows_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."templates" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "project" "jsonb" NOT NULL,
    "user_id" "uuid",
    "updated_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."templates" OWNER TO "postgres";

COMMENT ON TABLE "public"."templates" IS 'Published flow templates visible to everyone';

COMMENT ON COLUMN "public"."templates"."description" IS 'Description of this published flow. If it''s null, the inline description will display';

COMMENT ON COLUMN "public"."templates"."project" IS 'Flow data';

COMMENT ON COLUMN "public"."templates"."user_id" IS 'The creator of this flow';

ALTER TABLE "public"."templates" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."public_flows_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."public_templates" AS
 SELECT "t"."id",
    "t"."created_at",
    "t"."name",
    "t"."description",
    "t"."project",
    "t"."user_id",
    "t"."updated_at",
    "u"."email",
    ("u"."raw_user_meta_data" ->> 'avatar_url'::"text") AS "avatar_url",
    ("u"."raw_user_meta_data" ->> 'full_name'::"text") AS "full_name"
   FROM ("public"."templates" "t"
     JOIN "auth"."users" "u" ON (("t"."user_id" = "u"."id")));

ALTER TABLE "public"."public_templates" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."tools" (
    "id" bigint NOT NULL,
    "name" "text",
    "description" "text",
    "logo_url" "text",
    "code" "jsonb",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "variables" "jsonb" DEFAULT '{}'::"jsonb",
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "is_public" boolean DEFAULT false
);

ALTER TABLE "public"."tools" OWNER TO "postgres";

COMMENT ON TABLE "public"."tools" IS 'Public tools shared by all projects.';

CREATE OR REPLACE VIEW "public"."public_tools" AS
 SELECT "t"."id",
    "t"."name",
    "t"."description",
    "t"."logo_url",
    "t"."code",
    "t"."created_at",
    "t"."user_id",
    "t"."variables",
    "t"."updated_at",
    "t"."is_public",
    ("u"."raw_user_meta_data" ->> 'avatar_url'::"text") AS "user_avatar",
    ("u"."raw_user_meta_data" ->> 'full_name'::"text") AS "user_name",
    "u"."email" AS "user_email"
   FROM ("public"."tools" "t"
     JOIN "auth"."users" "u" ON (("t"."user_id" = "u"."id")))
  WHERE ("t"."is_public" = true);

ALTER TABLE "public"."public_tools" OWNER TO "postgres";

ALTER TABLE "public"."tools" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tools_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_settings" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "general" "jsonb" DEFAULT '{}'::"jsonb",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "tools" "jsonb" DEFAULT '[]'::"jsonb",
    "models" "jsonb" DEFAULT '[]'::"jsonb"
);

ALTER TABLE "public"."user_settings" OWNER TO "postgres";

COMMENT ON TABLE "public"."user_settings" IS 'Extra information about users';

ALTER TABLE "public"."user_settings" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."users_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."api_keys"
    ADD CONSTRAINT "api_keys_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."chat_messages"
    ADD CONSTRAINT "chat_messages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."chats"
    ADD CONSTRAINT "chats_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."datasets"
    ADD CONSTRAINT "datasets_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."chunks"
    ADD CONSTRAINT "documents_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."documents"
    ADD CONSTRAINT "documents_pkey1" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "flows_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."templates"
    ADD CONSTRAINT "public_flows_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tools"
    ADD CONSTRAINT "tools_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_settings"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_settings"
    ADD CONSTRAINT "users_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."api_keys"
    ADD CONSTRAINT "api_keys_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."chat_messages"
    ADD CONSTRAINT "chat_messages_chat_id_fkey" FOREIGN KEY ("chat_id") REFERENCES "public"."chats"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."chat_messages"
    ADD CONSTRAINT "chat_messages_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."chats"
    ADD CONSTRAINT "chats_project_id_fkey" FOREIGN KEY ("from_project") REFERENCES "public"."projects"("id");

ALTER TABLE ONLY "public"."chats"
    ADD CONSTRAINT "chats_template_id_fkey" FOREIGN KEY ("from_template") REFERENCES "public"."templates"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."chats"
    ADD CONSTRAINT "chats_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."chunks"
    ADD CONSTRAINT "chunks_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."documents"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."chunks"
    ADD CONSTRAINT "chunks_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."datasets"
    ADD CONSTRAINT "datasets_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."documents"
    ADD CONSTRAINT "documents_dataset_id_fkey" FOREIGN KEY ("dataset_id") REFERENCES "public"."datasets"("id");

ALTER TABLE ONLY "public"."documents"
    ADD CONSTRAINT "documents_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_owner_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."templates"
    ADD CONSTRAINT "templates_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."tools"
    ADD CONSTRAINT "tools_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_settings"
    ADD CONSTRAINT "users_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

CREATE POLICY "Allow all operations for all public users" ON "public"."chats" USING (true);

CREATE POLICY "Allow public read access to all templates" ON "public"."templates" FOR SELECT USING (true);

CREATE POLICY "Enable all access for all users" ON "public"."datasets" USING (true);

CREATE POLICY "Enable all for authenticated users only" ON "public"."chunks" TO "authenticated" USING (true);

CREATE POLICY "Enable all for authenticated users only" ON "public"."documents" TO "authenticated" USING (true);

CREATE POLICY "Enable all for users based on user_id" ON "public"."api_keys" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable all for users based on user_id" ON "public"."chat_messages" TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."templates" FOR DELETE USING (true);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."tools" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."user_settings" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable editing for authenticated owners only" ON "public"."projects" USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."templates" FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."tools" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."templates" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."tools" FOR SELECT USING (true);

CREATE POLICY "Enable update for users based on user_id" ON "public"."tools" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

ALTER TABLE "public"."api_keys" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."chat_messages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."chats" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."chunks" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."datasets" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."documents" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."projects" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."templates" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tools" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_settings" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."get_user_by_id"("user_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."get_user_by_id"("user_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_user_by_id"("user_id" "uuid") TO "service_role";

GRANT ALL ON FUNCTION "public"."search_chunks_by_dataset"("p_dataset_id" integer, "p_query_vector" "public"."vector", "p_limit" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."search_chunks_by_dataset"("p_dataset_id" integer, "p_query_vector" "public"."vector", "p_limit" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."search_chunks_by_dataset"("p_dataset_id" integer, "p_query_vector" "public"."vector", "p_limit" integer) TO "service_role";

GRANT ALL ON TABLE "public"."api_keys" TO "anon";
GRANT ALL ON TABLE "public"."api_keys" TO "authenticated";
GRANT ALL ON TABLE "public"."api_keys" TO "service_role";

GRANT ALL ON SEQUENCE "public"."api_keys_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."api_keys_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."api_keys_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."chat_messages" TO "anon";
GRANT ALL ON TABLE "public"."chat_messages" TO "authenticated";
GRANT ALL ON TABLE "public"."chat_messages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."chat_messages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."chat_messages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."chat_messages_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."chats" TO "anon";
GRANT ALL ON TABLE "public"."chats" TO "authenticated";
GRANT ALL ON TABLE "public"."chats" TO "service_role";

GRANT ALL ON SEQUENCE "public"."chats_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."chats_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."chats_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."chunks" TO "anon";
GRANT ALL ON TABLE "public"."chunks" TO "authenticated";
GRANT ALL ON TABLE "public"."chunks" TO "service_role";

GRANT ALL ON TABLE "public"."documents" TO "anon";
GRANT ALL ON TABLE "public"."documents" TO "authenticated";
GRANT ALL ON TABLE "public"."documents" TO "service_role";

GRANT ALL ON TABLE "public"."chunks_with_dataset" TO "anon";
GRANT ALL ON TABLE "public"."chunks_with_dataset" TO "authenticated";
GRANT ALL ON TABLE "public"."chunks_with_dataset" TO "service_role";

GRANT ALL ON TABLE "public"."datasets" TO "anon";
GRANT ALL ON TABLE "public"."datasets" TO "authenticated";
GRANT ALL ON TABLE "public"."datasets" TO "service_role";

GRANT ALL ON SEQUENCE "public"."datasets_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."datasets_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."datasets_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."documents_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."documents_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."documents_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."documents_id_seq1" TO "anon";
GRANT ALL ON SEQUENCE "public"."documents_id_seq1" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."documents_id_seq1" TO "service_role";

GRANT ALL ON TABLE "public"."projects" TO "anon";
GRANT ALL ON TABLE "public"."projects" TO "authenticated";
GRANT ALL ON TABLE "public"."projects" TO "service_role";

GRANT ALL ON SEQUENCE "public"."flows_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."flows_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."flows_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."templates" TO "anon";
GRANT ALL ON TABLE "public"."templates" TO "authenticated";
GRANT ALL ON TABLE "public"."templates" TO "service_role";

GRANT ALL ON SEQUENCE "public"."public_flows_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."public_flows_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."public_flows_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."public_templates" TO "anon";
GRANT ALL ON TABLE "public"."public_templates" TO "authenticated";
GRANT ALL ON TABLE "public"."public_templates" TO "service_role";

GRANT ALL ON TABLE "public"."tools" TO "anon";
GRANT ALL ON TABLE "public"."tools" TO "authenticated";
GRANT ALL ON TABLE "public"."tools" TO "service_role";

GRANT ALL ON TABLE "public"."public_tools" TO "anon";
GRANT ALL ON TABLE "public"."public_tools" TO "authenticated";
GRANT ALL ON TABLE "public"."public_tools" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tools_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tools_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tools_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_settings" TO "anon";
GRANT ALL ON TABLE "public"."user_settings" TO "authenticated";
GRANT ALL ON TABLE "public"."user_settings" TO "service_role";

GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
