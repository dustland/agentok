
# Start the conversation

{% if initial_chat_targets | length > 1 %}
# Sequential Chats
# TODO: The input messsage is ignored, I guess it should be in the first element?
chat_result = node_{{ first_converser['id'] }}.initiate_chats(
    [
      {%- for target in initial_chat_targets -%}
      {
        "recipient": node_{{ target['node']['id'] }},
        {%- if target['chat_options'].message %}
        "message": "{{ target.chat_options.message }}",
        {%- endif %}
        {%- if target['chat_options'].max_turns %}
        "max_turns": {{ target.chat_options.max_turns }},
        {%- endif %}
        {%- if target['chat_options'].summary_method %}
        "summary_method": "{{ target.chat_options.summary_method }}",
        {%- endif %}
      }{% if not loop.last %},{% endif %}
      {%- endfor -%}
    ]
)
{%- elif initial_chat_targets | length == 1 %}
{%- if initial_chat_targets[0].node['type'] == 'nestedchat' %}
# Nested Chat
reply =  node_{{ first_converser['id'] }}.generate_reply(
    messages=[{"role": "user", "content": args.message}]
)
{%- else -%}
# Talk to one single agent
chat_result = node_{{ first_converser['id'] }}.initiate_chat(
    node_{{ initial_chat_targets[0].node['id'] }},
    {%- if initial_chat_targets and initial_chat_targets[0] and 'data' in initial_chat_targets[0] and initial_chat_targets[0]['data'].class in ['RetrieveUserProxyAgent', 'MathUserProxyAgent']  %}
    problem=args.message,
    {%- else %}
    message=args.message,
    {%- endif %}
    {%- if initial_chat_targets[0]['chat_options'].max_turns %}
    max_turns={{ initial_chat_targets[0]['chat_options'].max_turns }},
    {%- endif %}
    {%- if initializer_node and initializer_node['data'] and initializer_node.data['summary_method'] %}
    summary_method="{{ initializer_node.data.summary_method }}",
    {%- endif %}
    {%- if initializer_node and initializer_node['data'] and initializer_node.data['summary_prompt'] %}
    summary_prompt="{{ initializer_node.data.summary_prompt }}",
    {%- endif %}
    {%- if initializer_node and initializer_node['data'] and initializer_node.data['max_turns'] %}
    max_turns={{ initializer_node.data.max_turns }},
    {%- endif %}
)

print("__CHAT_RESULT__", chat_result)

{%- endif -%}
{%- endif -%}
